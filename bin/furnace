#!/bin/bash

raise(){

	case "$1" in
		fatal)
			printf "\033[0;31m\033[1mFatal Error\033[0m : %s\n" "$2"
			echo "                            	FATAL -> $2" >> "$LOG_FILE"
			exit 1
		;;

		warning)
			if [ "$LOG_LEVEL" -le 2 ]; then
				printf "\033[0;33mWarning\033[0m : %s\n" "$2"
				echo "                            	WARNING -> $2" >> "$LOG_FILE"
			fi
		;;

		notice)
			if [ "$LOG_LEVEL" -le 1 ]; then
				printf "Notice : %s\n" "$2"
				echo "                            	NOTICE -> $2" >> "$LOG_FILE"
			fi
		;;

		debug)
			if [ "$LOG_LEVEL" -le 0 ]; then
				printf "DEBUG : %s\n" "$2"
				echo "                            	DEBUG -> $2" >> "$LOG_FILE"
			fi
		;;

	esac

}

source /etc/furnace.conf || raise fatal "Failed to load /etc/furnace.conf"

if [[ "$0" != "$BASH_SOURCE" ]]; then return; fi

help() {

	_help

	printf "Usage : furnace ${_MODULE} ${_ACTION} ${_USAGE}\nDescription : ${_DESCRIPTION}\nOptions :\n"
	printf -- "$(for PARAM in "${!_PARAM[@]}"; do echo "--${PARAM}=, -${_PARAM[$PARAM]}= | ${_HELP[$PARAM]}\n"; done)$(for PARAM_FLAG in "${!_PARAM_FLAG[@]}"; do echo "--${PARAM_FLAG}, -${_PARAM_FLAG[$PARAM_FLAG]} | ${_HELP[$PARAM_FLAG]}\n"; done)
	" | column -t -s'|'
}

help_modules() {

	printf "Usage : furnace (MODULE) (ACTION) [PARAMETERS]\nAvailable modules :\n"
	printf -- "$(find /usr/local/bin/ -name "furnace-*" | awk -F - '{print $2}' | sort | uniq | tr '\n' ' ')\n"
}

help_actions() {

	printf "Usage : furnace $1 (ACTION) [PARAMETERS]\nAvailable actions :\n"
	printf -- "$(find /usr/local/bin/ -name "furnace-${1}-*" | awk -F - '{print $3}' | sort | uniq | tr '\n' ' ')\n"
}

options() {

	_help

	for PARAM in "${!_PARAM[@]}"; do printf -- "--${PARAM}= "; done
	for PARAM_FLAG in "${!_PARAM_FLAG[@]}"; do printf -- "--${PARAM_FLAG} "; done
}

echo "[$(date --rfc-3339=seconds)] Trace from '$0 $1 $2'" >> "$LOG_FILE"

_MODULE="$1"
_ACTION="$2"
shift 2

if [[ $_MODULE == "-h" || $_MODULE == "--help" ]]; then
	help_modules
	exit 0
fi

declare -A _PARAM
declare -A _PARAM_FLAG
declare -A _ARG
declare -A _FLAG
declare -A _HELP

if [ -n "$(find /usr/local/bin/ -maxdepth 1 -name "furnace-${_MODULE}*" -print -quit)" ]; then

	if [[ $_ACTION == "-h" || $_ACTION == "--help" ]]; then
		help_actions "$_MODULE"
		exit 0
	fi

	raise debug "Sourcing /usr/local/bin/furnace-$_MODULE-$_ACTION"

	if [[ -f /usr/local/bin/furnace-"$_MODULE"-"$_ACTION" ]]; then
		. /usr/local/bin/furnace-"$_MODULE"-"$_ACTION"

		if [[ "$(type -t _params)" != "function" ]]; then
			raise fatal "The action file is missing a proper argument declaration"
		elif [[ "$(type -t _help)" != "function" ]]; then
			raise fatal "The action file is missing a proper help section"
		else
			_params
			for ARG in "${@}"; do
				ASSIGNED=0

				if [[ ${ARG} == "--help" ]] || [[ ${ARG} == "-h" ]]; then
					help
					exit 0
				fi

				if [[ ${ARG} == "--options" ]] || [[ ${ARG} == "-o" ]]; then
					options
					exit 0
				fi

				for PARAM in "${!_PARAM[@]}"; do
					if [[ ${ARG} == "--${PARAM}="* ]] || [[ ${ARG} == "-${_PARAM[$PARAM]}="* ]]; then
						_ARG["$PARAM"]="${ARG#*=}"
						ASSIGNED=1
					fi
				done

				for FLAG in "${!_PARAM_FLAG[@]}"; do
					if [[ ${ARG} == "--${FLAG}" ]] || [[ ${ARG} == "-${_PARAM_FLAG[$FLAG]}" ]]; then
						_FLAG["$FLAG"]=1
						ASSIGNED=1
					fi
				done

				if [[ $ASSIGNED == 0 ]]; then
					raise fatal "${ARG} is an invalid argument"
				fi

			done

			for PARAM in "${!_PARAM[@]}"; do
				if [[ -z "${_ARG[$PARAM]}" ]]; then
					raise fatal "--${PARAM}=, -${_PARAM[$PARAM]}= needs to be specified when using $_MODULE $_ACTION"
				fi
			done

			_method
		fi

	else
		raise fatal "$_ACTION is not a valid action for $_MODULE."
	fi
else
	raise fatal "$_MODULE is not a valid module"
fi
